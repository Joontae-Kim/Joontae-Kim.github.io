{"meta":{"title":"dev and dev","subtitle":"내가 볼려고 만든 깃헙 블로그","description":"내가 볼려고 만든 깃헙 블로그","author":"Joontae Kim","url":"https://joontae-kim.github.io","root":"/"},"pages":[{"title":"about","date":"2020-09-23T06:16:16.000Z","updated":"2020-09-23T06:16:16.397Z","comments":true,"path":"about/index.html","permalink":"https://joontae-kim.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"seo-friendly - Again Hello","slug":"seo-friendly","date":"2020-09-24T06:51:47.000Z","updated":"2020-09-24T10:30:57.956Z","comments":true,"path":"2020/09/24/seo-friendly/","link":"","permalink":"https://joontae-kim.github.io/2020/09/24/seo-friendly/","excerpt":"","text":"자. 이번 포스팅은 Github 블로그의 검색엔진 최적화에 대해 다뤄보도록 하겠습니다. hexo plugin 에는 SEO 작업을 위해 아래와 같은 plugin이 존재하고 저는 제가 필요로 하는 몇가지만 세팅해봤습니다. hexo-generator-feed hexo-generator-seo-friendly-sitemap hexo-generator-robotstxt hexo-auto-canonical 그럼 오늘도 시작해봅시다! 1. hexo-generator-feedhexo-generator-feed는 Atom 1.0 또는 RSS 2.0 형식의 feed를 생성해주는 자동 생성해주는 Plugin으로 Atom, RSS 그리고 Feed의 의미는 대략 아래와 같다. Feed는 자주 업데이트되는 디지털 컨텐츠를 사용자에게 제공하는데 사용하는 문서 포멧으로 배포를 목적으로 Feed를생성함으로써 Syndicate(배급) 및 Publish(출판) 한다. Feed는 읽거나 Subscribe(구독)한다. 다양한 형식으로 Feed가 제공될 수 있으나 일반적으로 RSS 2.0, ATOM 1.0, RSS 1.0이 사용된다. @네이버블로그_G1Softm.blog.naver.com/PostView.nhn?blogId=estern&logNo=110145610169&proxyReferer=https:%2F%2Fwww.google.com%2F 일단 설치해봅니다.1npm install hexo-generator-feed --save 설정 문제 없이 설치가 완료됐다면 블로그 디렉토리 root level에 있는 _config.yml 에 아래와 같이 세팅해보겠습니다. 123456789# RSS, ATOM auto generatorfeed: type: - atom - rss2 path: - atom.xml - rss2.xml limit: 20 위 설정들은 아래와 같고 hexo generate 명령어를 통해 publish 해주면 public 폴더안에 다음의 이미지와 같이 생성되는 것을 확인하실 수 있을겁니다. (git ignore 상태라 파일이름이 흐린점 양해부탁 드립니다.) - type: 생성할 feed 유형 - path: feed 파일을 생성할 위치 _(generate 될때의 디렉토리 기준 )_ - limit: 각 feed 유형에 담길 content의 개수 ⚠️ 그리고 여기서 주의할 점이 만약 블로그 디렉토리 root level에 있는 _config.yml 에서 아래 사진과 같이 자신으 github blog url 로 설정해주지 않으면 feed xml 파일이 생성될때 최초 설정값인 http://example.com 을 참조해서 xml content url을 생성합니다. 그러므로 제가 설정한 아래와 같이 자신의 블로그 url 변경해주셔야 합니다. 2. hexo-generator-seo-friendly-sitemap구글이나 네이버 검색엔진이 블로그의 전체적인 구조를 알 수 있도록 하려면 사이트맵 XML 파일을 제출해야 하는데 deploy 할때마다 sitemap.xml 을 생성해주는 plugin입니다. 설치1npm install hexo-generator-seo-friendly-sitemap --save 설정12sitemap: path: sitemap.xml 기본 옵션 구성은 위와 같으며 sitemap 생성시 페이지, 포스트, 카테고리, 태그에 대한 내용까지 생성해주며, 별도로 생성하고 싶지 않은 부분이 있다면 아래와 같이 설정할 수 있습니다. 1234sitemap: path: sitemap.xml tag: false category: false 3. hexo-generator-robotstxtrobots.txt 또한 sitemap.xml 과 같이 SEO에 있어서 기본적인 부분입니다. 간략히 의미와 역할에 대해 짚고가자면, robots.txt 는 웹사이트에 대한 검색엔진 로봇들의 접근을 조절해주고 제어해주는 역할, 그리고 로봇들에게 웹사이트의 사이트맵이 어디 있는지 알려주는 역할을 합니다. 주의하실 점은 여기서 말하는 사이트 맵은 수집 로봇을 위한 XML 사이트 맵을 말하며, 웹사이트의 메뉴 전체를 보여주는 사이트 맵을 의마하는 것은 아닙니다. robots.txt 파일을 설정하지 않으면 구글, 네이버 등 각종 검색엔진 로봇들이 웹사이트에서 찾을 수 있는 모든 정보를 크롤링하여 검색엔진 검색결과에 노출시킵니다. 만약 웹사이트 내 특정 페이지가 검색엔진에 노출되지 않기를 바란다면 robots.txt파일을 설정하여 이를 제어할 수 있습니다. @Robots.txt와 Sitemap.xml 알아보기 G1Softwww.twinword.co.kr/blog/basic-technical-seo 이제 robot.txt 에 대한 설정에 대해 보자면 기본적으로 아래의 값들을 이용해 수집 허용 또는 비허용을 설정할 수 있습니다. User-agent Allow Disallow robots.txt 규칙 예제 다른 검색엔진의 로봇에 대하여 수집을 허용하지 않고 네이버 검색로봇만 수집 허용으로 설정합니다. 1234User-agent: *Disallow: &#x2F;User-agent: YetiAllow: &#x2F; 모든 검색엔진의 로봇에 대하여 수집 허용으로 설정합니다. 12User-agent: *Allow: &#x2F; 사이트의 루트 페이지만 수집 허용으로 설정합니다. 123User-agent: *Disallow: &#x2F;Allow: &#x2F;$ 관리자 페이지, 개인 정보 페이지와 같이 검색로봇 방문을 허용하면 안 되는 웹 페이지는 수집 비허용으로 설정해주세요. 아래 예제는 네이버 검색로봇에게 /private-image, /private-video 등은 수집하면 안 된다고 알려줍니다. 12User-agent: YetiDisallow: &#x2F;private*&#x2F; 모든 검색로봇에게 사이트의 모든 페이지에 대하여 수집을 허용하지 않는다고 알려줍니다. 이 예제는 사이트의 어떠한 페이지도 수집 대상에 포함되지 않으므로 권장하지 않습니다. 12User-agent: *Disallow: &#x2F; sitemap.xml 지정내 사이트에 있는 페이지들의 목록이 담겨있는 sitemap.xml의 위치를 robots.txt에 기록해서 검색 로봇이 내 사이트의 콘텐츠를 더 잘 수집할 수 있도록 도울 수 있습니다. 123User-agent: *Allow: &#x2F;Sitemap: http:&#x2F;&#x2F;www.example.com&#x2F;sitemap.xml 자 이제 설치를 해봅시다.1npm install hexo-generator-robotstxt --save 설정먼저 블로그 디렉토리 root level에 있는 _config.yml 의 plugins에 hexo-generator-robotstxt 를 추가해 활성해주고 robots.txt 를 생성할때 참고할 속성들을 그 밑에 추가해줍니다. 1234robotstxt: useragent: &quot;*&quot; allow: sitemap: &#x2F;sitemap.xml 4. hexo-auto-canonicalhexo로 만들어진 블로그의 SEO를 위한 표준 링크(canonical link)를 HEAD 태그 내에 삽입해주는 plugin 입니다. 설치1npm install --save hexo-auto-canonical 설정hueman 테마의 경우 themes/hueman/layout/common/head.ejs 안에 아래의 코드를 삽입하면 됩니다. 참조 https://github.com/ppoffice/hexo-theme-hueman/wiki/Installation https://alleyful.github.io/2019/08/10/tools/hexo/hexo-guide-03/ https://futurecreator.github.io/2016/06/23/search-engine-optimization-hexo-plugins/ https://www.twinword.co.kr/blog/basic-technical-seo/ https://searchadvisor.naver.com/guide/seo-basic-robots https://github.com/HyunSeob/hexo-auto-canonical","categories":[{"name":"Hello","slug":"Hello","permalink":"https://joontae-kim.github.io/categories/Hello/"}],"tags":[{"name":"Hello World","slug":"Hello-World","permalink":"https://joontae-kim.github.io/tags/Hello-World/"}]},{"title":"Change theme - Again Hello","slug":"change-theme","date":"2020-09-23T17:09:20.000Z","updated":"2020-09-23T20:18:22.721Z","comments":true,"path":"2020/09/24/change-theme/","link":"","permalink":"https://joontae-kim.github.io/2020/09/24/change-theme/","excerpt":"","text":"먼저 theme를 바꾸는 작업을 어렵지 않았습니다. hexo cli를 통해 생성된 모든 블로그 폴더내에는 theme 라는 폴더를 가지고 있고 이 안에 변경할 theme를 내려받으면 됩니다. 1git clone https:&#x2F;&#x2F;github.com&#x2F;ppoffice&#x2F;hexo-theme-hueman.git themes&#x2F;hueman 그리고 블로그의 theme를 변경하려면 블로그 디렉토리의 root level에 있는 _config.yml 에서 theme를 hueman으로 변경한 다음 hueman 디렉토리에서 theme 환경설정을 위해 _config.yml.example 파일을 복붙 해서 _config.yml 을 생성해줍니다. 그럼 아래와 같이 두개 가 생성됩니다. blog 를 위한 _config.yml theme/hueman 을 위한 _config.yml 이제 테마가 잘 연결되었는지 확인! theme는 항상 느끼는거지만 고르는게 어려웠고, 그보다 더 어려웠던건 역시 Setting…개발하다보면 항상 Setup과 Setting 이 오래걸리고 복잡해서 시간을 많이 잡아먹는거 같다. 일단 hueman 의 공식문서를 참고해보면 기본적으로 menu와 customize 로 구분한다. 먼저 메뉴 란 블로그에 접속했을때 유저가 직접적으로 접근할 수 있는 네비게이션바와 같은 역할로 hueman 디렉토리 레벨에서의 _config.yml에서 추가 및 삭제할 수 있다. 12345678# Menusmenu: Home: / # Delete this row if you don&#x27;t want categories in your header nav bar # Categories: About: /about/index.html+ GitHub: https://github.com # 주소는 절대주소 또는 상대주소 모두 사용할 수 있다. theme 커스터마이징을 해보자. 공식문서 를 통해 확인해보면 Logo, Theme Color, Sidebar 등등 여러 가지를 수정할 수 있다고 합니다. 먼저 검색 기능을 시작으로 몇 가지만 수정해보도록 하겠습니다. 검색기능위 메뉴바 이미지의 우측에 보면 검색 기능을 확인할 수 있습니다. 기본적으로 Insight Search 기능을 제공해주고, 활용하기 위해서는 아래의 plugin을 설치한 후 hueman 디렉토리 레벨의 _config.yml 에서 검색기능을 설정되있는지 확인 또는 활성화해줘야 합니다. 1npm install -S hexo-generator-json-content 12345# Searchsearch: insight: true swiftype: baidu: false 로고로고는 사실 있어도 되고 없어도 되지만 일단 블로그의 명패 같은 역할이니 간단하게라도 만들어서 넣어보는것도 좋을거 같습니다. 일단 저는 여기서 약간 헷갈린것이 logo의 파일 위치와 크기였는 themes/hueman -&gt; source -&gt; css -&gt; images 위치에 있으며 대체할 logo 이미지도 같은 위치에 저장 후 url을 수정해주면 될거 같습니다. width와 height는 로고의 위치와 크기를 잡기 위한 약간의 삽질이 필요합니다. 1234logo: width: 165 height: 60 url: images/logo-header.png 썸네일블로그 내에서 포스트의 썸네일을 사용할지 말지를 정할 수 있습니다. 마찬가지로 hueman 디렉토리 레벨의 _config.yml 에서 수정 가능합니다. 썸네일을 활성화 했을경우 post의 front-matter에 추가함으로써 해당 포스트의 thumbnail으로 작동합니다. 123title: Hello Worlddate: 2013/7/13 20:46:25+ thumbnail: https://example.com/image.jpg 위젯위젯 또한 hueman 디렉토리 레벨의 _config.yml에서 수정가능하다. 1234567widgets: - recent_posts # 최근 포스트 - category # 카테고리 - archive # 어카이브 - tag # 태그 - tagcloud # 태그클라우드. 사용된 태그들을 빈도수에 따라 구름처럼 표시 - links # 링크 disqusgithub 블로그에 댓글 기능을 제공하기 위해서 대표적인 서비스인 disqus 를 세팅해줍니다. 먼저 계정이 없다면 계정을 생성합니다. GET STARTED 버튼을 클릭한 후 hueman 디렉토리 레벨의 _config.yml 에서 disqus 에 입력하기 위한 short_name 으로 블로그 이름 설정합니다. (자세한 과정은 https://simhyejin.github.io/2016/06/24/hexo-themes/ 에서 Disqus 파트 참조) 12345# Commentcomment: disqus: [example_short_name] # enter disqus shortname here duoshuo: # enter duoshuo shortname here youyan: # enter youyan uid here 이상으로 hueman 테마를 사용하면서 기본적으로 갖춰볼만한 설정들을 모두 했고, 다음으로는 구글에서 잘 검색되도록 하기위한 세팅들을 다뤄보겠습니다. 참조 https://github.com/ppoffice/hexo-theme-hueman/wiki/Installation https://simhyejin.github.io/2016/06/24/hexo-themes/ https://simhyejin.github.io/2016/06/24/hexo-themes/","categories":[{"name":"Hello","slug":"Hello","permalink":"https://joontae-kim.github.io/categories/Hello/"}],"tags":[{"name":"Hello World","slug":"Hello-World","permalink":"https://joontae-kim.github.io/tags/Hello-World/"}]},{"title":"Again Hello","slug":"Again-Hello","date":"2020-09-23T07:49:07.000Z","updated":"2020-09-23T20:15:39.425Z","comments":true,"path":"2020/09/23/Again-Hello/","link":"","permalink":"https://joontae-kim.github.io/2020/09/23/Again-Hello/","excerpt":"","text":"고민고민 끝에 GitHub 블로그를 Renewal 해버리게 되었다.개인플젝 개발을 마무리하고 블로그에 공부할것 &amp; 공부했던 것들을 정리해야지 했지만 아무리 봐도 이전에 수정하다가 실패한 clean-blog theme 스타일 때문에 거슬려서 이참에 theme를 변경했다. 아니 아예 갈아엎었고, 백업 환경까지 구성했습니다. 작업을 하면서도 의구심이 들었다. “괜히 일만 더 키우는게 아닐까?”, “이럴 시간에 공부한거 정리하던가 강의 들으면서 정리하는게 낫지 않을까?”. 하지만 그래도 다 하고보니 개운해서 다행이다. 그렇다면 어디서부터 어디까지 갈아엎은걸까? 나중에 위해서라도 또는 다른 분들을 위해서라도 정리해보겠습니다. Renewal 범위 theme 변경 clean-blog -&gt; hueman hueman 테마 커스터마이징 blog root &amp; theme 백업하기 (형상관리 by github) About 페이지 만들기 구글 Analytics &amp; Search Console 등록하기 blog 파일 in root 수정시 hexo server 자동 재시작하기 사실 위의 과정은 구글에서 검색해보면 좋은 포스팅들이 많고 잘 따라해보면 쉽지만… 막상 따라하다보면 이게 이걸 말하는건가 싶은 점이 있어서 날 위해 그리고 앞으로 하실 분들을 위해 정리해보려고 합니다.","categories":[{"name":"Hello","slug":"Hello","permalink":"https://joontae-kim.github.io/categories/Hello/"}],"tags":[{"name":"Hello World","slug":"Hello-World","permalink":"https://joontae-kim.github.io/tags/Hello-World/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-09-22T10:51:30.861Z","updated":"2020-09-23T08:08:50.190Z","comments":true,"path":"2020/09/22/hello-world/","link":"","permalink":"https://joontae-kim.github.io/2020/09/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Hello","slug":"Hello","permalink":"https://joontae-kim.github.io/categories/Hello/"}],"tags":[{"name":"Hello World","slug":"Hello-World","permalink":"https://joontae-kim.github.io/tags/Hello-World/"}]}],"categories":[{"name":"Hello","slug":"Hello","permalink":"https://joontae-kim.github.io/categories/Hello/"}],"tags":[{"name":"Hello World","slug":"Hello-World","permalink":"https://joontae-kim.github.io/tags/Hello-World/"}]}